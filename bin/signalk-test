#!/usr/bin/env node

/*
 * Copyright 2015 Teppo Kurki <teppo.kurki@iki.fi>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

var deltaDebug = require("debug")("signalk:delta");
var fullDebug = require("debug")("signalk:full");
var JSONPath = require("JSONPath");
var signalk_client = require("signalk-client");
var schema = require("signalk-schema");
var Spinner = require("cli-spinner").Spinner;

var isDelta = signalk_client.isDelta;
var isHello = signalk_client.isHello;
var client = new signalk_client.Client();

console.log("NOTE: If you get validation errors some of them may be false positives, " +
            "notably ones with a reference to _anyOf_ in the path.");
console.log("The validator in use creates false extra error messages when there is at least one real error.")

var args = process.argv.slice(2);

Spinner.setDefaultSpinnerString("|/-\\-");
var spinner = new Spinner();
var spinning = false;
var lastMsgReceived = 0;

var options = {
  onData: function(data) {
    if (isHello(data)) {
      console.log("Version:" + data.version);
    }
    lastMsgReceived = new Date().getTime();
    if (isDelta(data)) {
      deltaDebug(JSON.stringify(data, null, 2))
      checkDelta(data);
      var full = schema.deltaToFull(data);
      schema.fillIdentity(full);
      fullDebug(JSON.stringify(full, null, 2))
      checkFull(full);
    }
  },
  onConnect: function(connection) {
    console.log("Connected to " + connection.host);
    var sub = '{"context":"vessels.self","subscribe":[{"path":"*"}]}';
    connection.send(sub);
    startRestChecker();
  },
  onDisconnect: function() {
    console.log("Disconnected");
  },
  onError: function(error) {
    console.log(error);
  },
  subscribe: "all"

};

if (args.length === 2) {
  options.hostname = args[0];
  options.port = args[1];
}
if (args.length === 3) {
  subscribe = args[2]
}

client.connect(options);

function startRestChecker() {
  setInterval(function() {
    client.apiGet('/').then(function(response) {
      checkFull(response.body);
    }).catch(function(e) {
      console.error(e.response ? e.response.error : e);
    });
  }, 1000);
}

function checkFull(data) {
  var validationResult = schema.validateFull(data);
  if (!validationResult.valid) {
    printError(data, validationResult.errors);
  }
}

function checkDelta(data) {
  var validationResult = schema.validateDelta(data);
  if (!validationResult.valid) {
    printError(data, validationResult.errors);
  }
}

function printError(data, errors) {
  errors.forEach(function(error) {
    var path = undefined;
    if(error.dataPath) {
      var parent = error.dataPath.split('/');
      if(parent.length > 0) {
        parent.pop();
      }
      path = '$' + parent.join('.');
    }

    console.error("\n---VALIDATION ERROR---");
    console.error("      ERROR:", error.message);
    console.error("  DATA PATH:", error.dataPath);
    console.error("SCHEMA PATH:", error.schemaPath);

    if(path) {
      var context = JSONPath({
        path: path,
        json: data
      });
      console.error(JSON.stringify(context[0], null, 2));
    } else {
      console.error(JSON.stringify(data, null, 2));
    }
  });
}

function hasFreshData() {
  return result = new Date().getTime() - lastMsgReceived < 500;
}

setInterval(function() {
  if (hasFreshData() && !spinning) {
    spinner.start();
    spinning = true;
  }
  if (spinning && !hasFreshData()) {
    spinner.stop();
    spinning = false;
  }
}, 200);
